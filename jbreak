#!/usr/bin/env python
# POC: Guoqing.Ge@noaa.gov
#
import yaml, sys, os, shutil
from datetime import datetime

# Custom Dumper class to modify list formatting
class MyDumper(yaml.Dumper):
  def represent_datetime(self,data):
    return self.represent_scalar('tag:yaml.org,2002:timestamp', data.strftime('%Y-%m-%dT%H:%M:%SZ'))
  def represent_list(self, data):
    # Check if the list contains only simple literals (strings, numbers, booleans)
    if all(isinstance(item, (str, int, float, bool)) for item in data):
      # Use compact flow style ([])
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=True)
    else:
      # Use block style (-)
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=False)

def filter_dump(sname,key,obs,MyDumper):
  filter_text=''
  filter_type=key.split(' ',1)[1].replace(' ', '').rstrip('s')
  if key in obs:
    for j,value in enumerate(obs[key]):
      myfilter=value['filter']
      if myfilter == 'Perform Action':
        myfilter=value['action']['name']
      filter_text=filter_text+f' {myfilter},'
      myfilter=myfilter.replace(' ', '_')
      with open(f'obs/{sname}/{filter_type}_{j:02}_{myfilter}.yaml','w') as outfile:
        yaml.dump(value, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)
  # ~~~~~
  return filter_text

# ====== main =========
MyDumper.add_representer(list, MyDumper.represent_list)
MyDumper.add_representer(datetime, MyDumper.represent_datetime)

args=sys.argv
nargs=len(args)-1
if nargs <1:
  print(f"jquery <yamlfile_name>")
  exit()

yfile=open(args[1], 'r')
data=yaml.safe_load(yfile)

# ------------------------------------------------------------------------
# create a subdirectory 'expdir=break_yaml'
# if expdir exists, find an available dir name to backup old files first
expdir="break_yaml"
if os.path.exists(expdir):
  knt=1
  savedir=f'{expdir}_old{knt:04}'
  while os.path.exists(savedir):
    knt += 1
    savedir=f'{expdir}_old{knt:04}'
  shutil.move(expdir, savedir)
#
os.makedirs(expdir)
os.chdir('./break_yaml')

# ------------------------------------------------------------------------
# dump a clean version: break_yaml/save/org.yaml
tmp={
  'output': data['output'],
  'variational': data['variational'],
  'cost function': data['cost function']
  }
os.makedirs('save',exist_ok=True)
with open('save/org.yaml','w') as outfile:
  yaml.dump(tmp, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

# ------------------------------------------------------------------------
# dump the output and variational sections to variational.yaml
tmp={
  'output': data['output'],
  'variational': data['variational']
  }
with open('variational.yaml','w') as outfile:
  yaml.dump(tmp, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

# ------------------------------------------------------------------------
# get the "cost function" sub dictionary and dump header contents except "background erro" and "observations" keys
costf=data['cost function']
tmp={
  'cost type': costf['cost type'],
  'time window': costf['time window'],
  'jb evaluation': costf['jb evaluation'],
  'geometry': costf['geometry'],
  'analysis variables': costf['analysis variables'],
  'background': costf['background']
    }
with open('costf_header.yaml','w') as outfile:
  yaml.dump(tmp, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

# ------------------------------------------------------------------------
# dump 'background error'
components=[]
BEC=costf['background error']
if BEC['covariance model'].upper() == "HYBRID":
  components=BEC['components']
else:
  comp={'covariance': BEC, 'weight':{'value':1.0}}
  components.append(comp)
for index,mybec in enumerate(components):
  cov=mybec['covariance']
  wgt=mybec['weight']['value']
  fname=f"costf_bec{index}_{cov['covariance model']}_wgt{wgt}.yaml"
  with open(fname,'w') as outfile:
    yaml.dump(cov, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

# ------------------------------------------------------------------------
# summarize the assimilated observation types and dump observations to break_yaml/obs
os.makedirs('./obs',exist_ok=True)
obslist=costf['observations']['observers']
nobs=len(obslist)
obs_names=''
filter_text=''
obs_order=''
filter_order=''

# ********************
# loop through observers
for i in range(nobs):
  lname=obslist[i]['obs space']['name']
  sname=lname.split('=')[0] # get the short name of the "obs space.name"
  obs_names+=sname+','
  obs_order+=f'{sname}\n' # record the original order of observers
  os.makedirs(f'./obs/{sname}',exist_ok=True)  # each observer will be under a separate subdirectory
  
  # ----------------------------------------------------------------
  # get the observations headers (excluding the filters) and dump
  observer={
    'obs space': obslist[i]['obs space'],
    'obs operator': obslist[i]['obs operator'],
      }
  if 'obs localizations' in obslist[i]: # only ensemble DA needs this
    observer['obs localizations']=obslist[i]['obs localizations']
  if 'obs error' in obslist[i]: # radiance data does not have the 'obs error' section ?
    observer['obs error']=obslist[i]['obs error']
  with open(f'obs/{sname}/header.yaml','w') as outfile:
    yaml.dump(observer, outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

  # ----------------------------------------------------------------
  # dump 'obs bias" if exists
  if 'obs bias' in obslist[i]: # radiance DA
    with open(f'obs/{sname}/bias.yaml','w') as outfile:
      yaml.dump(obslist[i]['obs bias'], outfile, Dumper=MyDumper, default_flow_style=False, sort_keys=False)

  filter_text+=f'\n#[{lname}]:\n'
  # loop through filters
  filter_text+=filter_dump(sname,'obs pre filters',obslist[i], MyDumper)
  filter_text+=filter_dump(sname,'obs filters',obslist[i], MyDumper)
  filter_text+=filter_dump(sname,'obs post filters',obslist[i], MyDumper)
  #
  filter_text=filter_text.rstrip(',')+'\n'

# ------------------------------------------------------------------------
# print out the number of observers
obs_names=f'{nobs} observers:\n{obs_names.rstrip(",")}'
print(obs_names)
with open('summary_obs.log','w') as outfile:
  outfile.write(f'{obs_names}\n\n{filter_text}\n')
obs_order=obs_order.rstrip('\n')
with open('obs/order.txt','w') as outfile:
  outfile.write(obs_order)

# ------------------------------------------------------------------------
# print out information
print("\nall breakout yaml parts are under ./break_yaml/")
