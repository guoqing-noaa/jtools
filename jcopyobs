#!/usr/bin/env python
# POC: Guoqing.Ge@noaa.gov
#
import yaml, sys, os, shutil, copy
from datetime import datetime

# Custom Dumper class to modify list formatting
class MyDumper(yaml.Dumper):
  def represent_datetime(self,data):
    return self.represent_scalar('tag:yaml.org,2002:timestamp', data.strftime('%Y-%m-%dT%H:%M:%SZ'))
  def represent_list(self, data):
    # Check if the list contains only simple literals (strings, numbers, booleans)
    if all(isinstance(item, (str, int, float, bool)) for item in data):
      # Use compact flow style ([])
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=True)
    else:
      # Use block style (-)
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=False)

# ====== main =========
MyDumper.add_representer(list, MyDumper.represent_list)
MyDumper.add_representer(datetime, MyDumper.represent_datetime)

args=sys.argv
nargs=len(args)-1
if nargs <3:
  print(f"jcopyobs <obs_list> <yaml_file1> <yaml_file2>")
  exit()
# ~~
copyobs=args[1].split(',')
yfile=open(args[2],'r')
yfile2=open(args[3],'r')

data=yaml.safe_load(yfile)
costf=data['cost function']
obslist=costf['observations']['observers']
nobs=len(obslist)
# ********************
# loop through observers
namelist=[]
for i in range(nobs):
  lname=obslist[i]['obs space']['name']
  namelist.append(lname)
# ~~
# check user input obs string
index=[]
for i,lname in enumerate(namelist):
  for myobs in copyobs:
    if myobs in lname:
      index.append(i)
      break
# ~~
# copy obs to yaml_file2
data2=yaml.safe_load(yfile2)
observers=[]
for np in index:
 observers.append(obslist[np])
data2['cost function']['observations']['observers'].extend(observers)
# ~~
# dump out the new yaml file
yaml.dump(data2, sys.stdout, Dumper=MyDumper, default_flow_style=False, sort_keys=False)
