#!/usr/bin/env python
# POC: Guoqing.Ge@noaa.gov
#
import yaml, sys, os, shutil, glob
from datetime import datetime

# Custom Dumper class to modify list formatting
class MyDumper(yaml.Dumper):
  def represent_datetime(self,data):
    return self.represent_scalar('tag:yaml.org,2002:timestamp', data.strftime('%Y-%m-%dT%H:%M:%SZ'))
  def represent_list(self, data):
    # Check if the list contains only simple literals (strings, numbers, booleans)
    if all(isinstance(item, (str, int, float, bool)) for item in data):
      # Use compact flow style ([])
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=True)
    else:
      # Use block style (-)
      return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=False)

def filter_pack(sname,key):
  filter_type=key.split(' ',1)[1].replace(' ', '').rstrip('s') 
  filter_files=glob.glob(f'obs/{sname}/{filter_type}_*')
  filter_files=[path.replace(f"obs/{sname}/", "", 1) for path in filter_files]
  listFinal=[]
  if filter_files:
    with open(f"obs/{sname}/order.{filter_type}", "r") as file:
      orders=[line.strip() for line in file.readlines()] 
    # ~~~~
    # append all entries in the order file first
    for myfile in orders:
      if os.path.exists(f'obs/{sname}/{myfile}'):
        listFinal.append(myfile)
  # ~~~~
  # append other filter files under obs/{sname} but not in the order file
  for myfile in filter_files:
    # check whether it is in order.txt
    indices = [i for i, x in enumerate(orders) if x == myfile]
    if not indices:
      listFinal.append(myfile)
  # ~~~~~
  # loop through all obs directories under obs/
  filter_list=[]
  for myfilter in listFinal:
    dcFilter=yaml.safe_load(open(f'obs/{sname}/{myfilter}','r'))
    filter_list.append(dcFilter)
  # ~~~~
  return filter_list

# ====== main =========
MyDumper.add_representer(list, MyDumper.represent_list)
MyDumper.add_representer(datetime, MyDumper.represent_datetime)

args=sys.argv
nargs=len(args)-1
if nargs <1:
  print(f"jquery <break_yaml_directory>")
  exit()
os.chdir(args[1])

data={}
# ------------------------------------------------------------------------
# read variational.yaml and costf_header.yaml
data=yaml.safe_load(open('variational.yaml','r'))
costf=yaml.safe_load(open('costf_header.yaml','r'))

# ------------------------------------------------------------------------
# read 'background error'
becfiles=glob.glob("costf_bec*.yaml")
components=[]
for fbec in becfiles:
  cov=yaml.safe_load(open(fbec,'r'))
  keys=fbec.split('_')
  wgt=keys[3][3:].rstrip('.yaml')
  mybec={'covariance': cov,
      'weight': {'value':float(wgt)}
      }
  components.append(mybec)
# ~~
BEC={'covariance model': 'hybrid',
    'components': components
    }
costf['background error']=BEC

# ------------------------------------------------------------------------
# read available observations/observers (excluding _dugout_), apply orders
with open("obs/order.txt", "r") as file:
  orders=[line.strip() for line in file.readlines()] 
obsdirs=glob.glob("obs/*")
obsdirs=[path.replace("obs/", "", 1) for path in obsdirs] # remove leading 'obs/'
listFinal=[]
for myfile in orders:
  if os.path.exists(f'obs/{myfile}'):
    listFinal.append(myfile)
#
for obsdir in obsdirs:
  # check whether it is in order.txt
  indices = [i for i, x in enumerate(orders) if x == obsdir]
  if not indices:
    if obsdir != "_dugout_" and obsdir != "order.txt":
      listFinal.append(obsdir)
# ~~~~~
# loop through all obs directories under obs/
obslist=[]
for myobs in listFinal:
  # ----------------------------------------------------------------
  # get the observations headers (excluding the filters)
  observer=yaml.safe_load(open(f'obs/{myobs}/header.yaml','r'))
  if os.path.exists(f'obs/{myobs}/bias.yaml'):
    bias=yaml.safe_load(open(f'obs/{myobs}/bias.yaml','r'))
    observer['obs bias']=bias

  # loop through filters
  tmp=filter_pack(myobs,'obs pre filters')
  if tmp:
    observer['obs pre filters']=tmp
  #
  tmp=filter_pack(myobs,'obs filters')
  if tmp:
    observer['obs filters']=tmp
  #
  tmp=filter_pack(myobs,'obs post filters')
  if tmp:
    observer['obs post filters']=tmp
  #
  obslist.append(observer)
# ~~~~
costf['observations']={'observers': obslist}

data['cost function']=costf
yaml.dump(data, sys.stdout, Dumper=MyDumper, default_flow_style=False, sort_keys=False)
# ------------------------------------------------------------------------
# print out information
#
